geom_bar(stat = "identity") + ylab("Beltijd in s") + xlab("") +
ggtitle("Beltijd per Nummer") +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.justification=c(0,1), legend.position=c(0,1)) +
scale_fill_brewer()
plot10 <-
ggplot(Prijs_per_nummer_top, aes(x = Nummer, y = SomPrijs, fill= Maand)) +
geom_bar(stat = "identity") + ylab("Kosten in Euro's") + xlab("") +
ggtitle("Kosten per Nummer") +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position='none') +
scale_fill_brewer()
multiplot(plot10, plot9, cols=2)
#forecast
#regression smoothing in day view
#regression line in month view
#use over weeks
#add weeks in the month view?
#pie chart for price per number?
#allargare finestre immagini
ggplot(Prijs_per_nummer_top, aes(x = Nummer, y = SomPrijs, fill= Maand)) +
geom_bar(stat = "identity") + ylab("Kosten in Euro's") + xlab("") +
ggtitle("Kosten per Nummer") +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.justification=c(1,1), legend.position=c(1,1)) +
scale_fill_brewer()
library(plyr)
Tijd_per_nummer <- aggregate(Gesprekken$Gespreksduur, by = list(Gesprekken$Telnummer, Gesprekken$Maand), 'sum')
Prijs_per_nummer <- aggregate(as.numeric(Gesprekken$Prijs), by = list(Gesprekken$Telnummer, Gesprekken$Maand), 'sum')
colnames(Tijd_per_nummer) <- c("Nummer", "Maand", "SomTijd")
colnames(Prijs_per_nummer) <- c("Nummer", "Maand", "SomPrijs")
Tijd_per_nummer_top <- arrange(Tijd_per_nummer, desc(SomTijd))[1:15,]
Prijs_per_nummer_top <- arrange(Prijs_per_nummer, desc(SomPrijs))[1:15,]
plot9 <-
ggplot(Tijd_per_nummer_top, aes(x = Nummer, y = SomTijd, fill= Maand)) +
geom_bar(stat = "identity") + ylab("Beltijd in s") + xlab("") +
ggtitle("Beltijd per Nummer") +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position='none') +
scale_fill_brewer()
plot10 <-
ggplot(Prijs_per_nummer_top, aes(x = Nummer, y = SomPrijs, fill= Maand)) +
geom_bar(stat = "identity") + ylab("Kosten in Euro's") + xlab("") +
ggtitle("Kosten per Nummer") +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.justification=c(0,1), legend.position=c(0,1)) +
scale_fill_brewer()
multiplot(plot10, plot9, cols=2)
#forecast
#use over weeks
#add weeks in the month view?
#allargare finestre immagini
library(plyr)
Tijd_per_nummer <- aggregate(Gesprekken$Gespreksduur, by = list(Gesprekken$Telnummer, Gesprekken$Maand), 'sum')
Prijs_per_nummer <- aggregate(as.numeric(Gesprekken$Prijs), by = list(Gesprekken$Telnummer, Gesprekken$Maand), 'sum')
colnames(Tijd_per_nummer) <- c("Nummer", "Maand", "SomTijd")
colnames(Prijs_per_nummer) <- c("Nummer", "Maand", "SomPrijs")
Tijd_per_nummer_top <- arrange(Tijd_per_nummer, desc(SomTijd))[1:15,]
Prijs_per_nummer_top <- arrange(Prijs_per_nummer, desc(SomPrijs))[1:15,]
plot9 <-
ggplot(Tijd_per_nummer_top, aes(x = Nummer, y = SomTijd, fill= Maand)) +
geom_bar(stat = "identity") + ylab("Beltijd in s") + xlab("") +
ggtitle("Beltijd per Nummer") +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position='none') +
scale_fill_brewer()
plot10 <-
ggplot(Prijs_per_nummer_top, aes(x = Nummer, y = SomPrijs, fill= Maand)) +
geom_bar(stat = "identity") + ylab("Kosten in Euro's") + xlab("") +
ggtitle("Kosten per Nummer") +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.justification=c(1,1), legend.position=c(1,1)) +
scale_fill_brewer()
multiplot(plot10, plot9, cols=2)
#forecast
#use over weeks
#add weeks in the month view?
#allargare finestre immagini
library(forecast)
Time_series <- ts(Prijs_per_maand$Kosten)
length_ts <- length(Time_series)
Time_series_train <- Time_series[1:(length_ts-4)]
Time_series_test <- Time_series[(length_ts-3):length_ts]
model_autoarima <- auto.arima(Time_series_train)
model_ets <- ets(Time_series_train)
forecast_autoarima <- forecast(model_autoarima, 4)
forecast_ets <- forecast(model_ets, 4)
error_autoarima <- sqrt(sum((forecast_autoarima$mean-Time_series_test)*(forecast_autoarima$mean-Time_series_test)))
error_ets <- sqrt(sum((forecast_ets$mean-Time_series_test)*(forecast_ets$mean-Time_series_test)))
error_autoarima
error_ets
Time_series_train <- Time_series[1:(length_ts-1)]
Time_series_test <- Time_series[length_ts]
model_autoarima <- auto.arima(Time_series_train)
model_ets <- ets(Time_series_train)
forecast_autoarima <- forecast(model_autoarima, 1)
forecast_ets <- forecast(model_ets, 1)
error_autoarima <- sqrt(sum((forecast_autoarima$mean-Time_series_test)*(forecast_autoarima$mean-Time_series_test)))
error_ets <- sqrt(sum((forecast_ets$mean-Time_series_test)*(forecast_ets$mean-Time_series_test)))
error_autoarima
error_ets
library(forecast)
Time_series <- ts(Prijs_per_maand$Kosten)
length_ts <- length(Time_series)
Time_series_train1 <- Time_series[1:(length_ts-4)]
Time_series_test1 <- Time_series[(length_ts-3):length_ts]
model_autoarima1 <- auto.arima(Time_series_train1)
model_ets1 <- ets(Time_series_train1)
forecast_autoarima1 <- forecast(model_autoarima1, 4)
forecast_ets1 <- forecast(model_ets1, 4)
error_autoarima1 <- sqrt(sum((forecast_autoarima1$mean-Time_series_test1)*(forecast_autoarima1$mean-Time_series_test1)))
error_ets1 <- sqrt(sum((forecast_ets1$mean-Time_series_test1)*(forecast_ets1$mean-Time_series_test1)))
error_autoarima1
error_ets1
Time_series_train <- Time_series[1:(length_ts-1)]
Time_series_test <- Time_series[length_ts]
model_autoarima <- auto.arima(Time_series_train)
model_ets <- ets(Time_series_train)
forecast_autoarima <- forecast(model_autoarima, 1)
forecast_ets <- forecast(model_ets, 1)
error_autoarima <- sqrt(sum((forecast_autoarima$mean-Time_series_test)*(forecast_autoarima$mean-Time_series_test)))
error_ets <- sqrt(sum((forecast_ets$mean-Time_series_test)*(forecast_ets$mean-Time_series_test)))
error_autoarima
error_ets
library(forecast)
Time_series <- ts(Prijs_per_maand$Kosten)
length_ts <- length(Time_series)
Time_series_train1 <- Time_series[1:(length_ts-4)]
Time_series_test1 <- Time_series[(length_ts-3):length_ts]
model_autoarima1 <- auto.arima(Time_series_train1)
model_ets1 <- ets(Time_series_train1)
forecast_autoarima1 <- forecast(model_autoarima1, 4)
forecast_ets1 <- forecast(model_ets1, 4)
error_autoarima1 <- sqrt(sum((forecast_autoarima1$mean-Time_series_test1)*(forecast_autoarima1$mean-Time_series_test1)))
error_ets1 <- sqrt(sum((forecast_ets1$mean-Time_series_test1)*(forecast_ets1$mean-Time_series_test1)))
error_autoarima1
error_ets1
Time_series_train2 <- Time_series[1:(length_ts-1)]
Time_series_test2 <- Time_series[length_ts]
model_autoarima2 <- auto.arima(Time_series_train2)
model_ets2 <- ets(Time_series_train2)
forecast_autoarima2 <- forecast(model_autoarima2, 1)
forecast_ets2 <- forecast(model_ets2, 1)
error_autoarima2 <- sqrt(sum((forecast_autoarima2$mean-Time_series_test2)*(forecast_autoarima2$mean-Time_series_test2)))
error_ets2 <- sqrt(sum((forecast_ets2$mean-Time_series_test2)*(forecast_ets2$mean-Time_series_test2)))
error_autoarima2
error_ets2
model_autoarima <- auto.arima(Time_series)
forecast_autoarima <- forecast(model_autoarima, 1)
plot(forecast_autoarima)
#pd <- funggcast(Time_series, forecast_autoarima)
#p <- ggplot(forecast_autoarima, aes(mean)) + geom_line()
length(Time_series)
Time_series_train1 <- Time_series[1:(length_ts-4)]
Time_series_test1 <- Time_series[(length_ts-3):length_ts]
model_autoarima1 <- auto.arima(Time_series_train1)
model_ets1 <- ets(Time_series_train1)
forecast_autoarima1 <- forecast(model_autoarima1, 4)
forecast_ets1 <- forecast(model_ets1, 4)
error_autoarima1 <- sqrt(sum((forecast_autoarima1$mean-Time_series_test1)*(forecast_autoarima1$mean-Time_series_test1)))
error_ets1 <- sqrt(sum((forecast_ets1$mean-Time_series_test1)*(forecast_ets1$mean-Time_series_test1)))
error_autoarima1
error_ets1
Time_series_train2 <- Time_series[1:(length_ts-1)]
Time_series_test2 <- Time_series[length_ts]
model_autoarima2 <- auto.arima(Time_series_train2)
model_ets2 <- ets(Time_series_train2)
forecast_autoarima2 <- forecast(model_autoarima2, 1)
forecast_ets2 <- forecast(model_ets2, 1)
error_autoarima2 <- sqrt(sum((forecast_autoarima2$mean-Time_series_test2)*(forecast_autoarima2$mean-Time_series_test2)))
error_ets2 <- sqrt(sum((forecast_ets2$mean-Time_series_test2)*(forecast_ets2$mean-Time_series_test2)))
error_autoarima2
error_ets2
complete_data <- read.csv("./TelefoonGegevensMichele.csv", header=TRUE, stringsAsFactors = FALSE,
colClasses = "character", sep=";")
head(complete_data)
library(lubridate)
names(complete_data) <- c("Datum", "Tijd", "Type", "field4", "field5", "field6", "field7", "Prijs")
complete_data$Prijs <- as.numeric(gsub(",", ".", complete_data$Prijs))
complete_data$Maand <- factor(months(as.Date(complete_data$Datum, format = "%d/%m/%y")), ordered = TRUE,
levels = c("March", "April", "May", "June", "July", "August",
"September", "October", "November", "December", "January"))
complete_data_split <- split(complete_data, complete_data$Type)
Gesprekken <- complete_data_split$Gesprek[, c(1,2,5,6,8)]
colnames(Gesprekken) <- c("Datum", "Tijd", "Telnummer", "Gespreksduur", "Prijs")
Gesprekken$Prijs <- gsub(",", ".", Gesprekken$Prijs)
Gesprekken$Uur <- factor(substr(Gesprekken$Tijd, 1, 2), ordered = TRUE,
levels = c("00", "01","02","03", "04", "05","06", "07", "08", "09", "10",
"11","12","13","14","15","16","17","18","19","20","21", "22", "23"))
Gesprekken$Gespreksduur <- gsub(",", ".", Gesprekken$Gespreksduur)
Gesprekken$Gespreksduur <-  round(as.numeric(Gesprekken$Gespreksduur) * 86400)
Gesprekken$Weekdag <- factor(weekdays(as.Date(Gesprekken$Datum)), ordered = TRUE,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
Gesprekken$Maand <- factor(months(as.Date(Gesprekken$Datum)), ordered = TRUE,
levels = c("March", "April", "May", "June", "July", "August",
"September", "October", "November", "December", "January"))
Internet <- complete_data_split$Internet[, c(1,2,5,6,8)]
colnames(Internet) <- c("Datum", "Tijd", "Verbruik", "Eenheid", "Prijs")
Internet$Uur <- factor(substr(Internet$Tijd, 1, 2), ordered = TRUE,
levels = c("00", "01","02","03","04","05","06","07", "08", "09", "10",
"11","12","13","14","15","16","17","18","19","20","21", "22", "23"))
Internet$Eenheid <- gsub(")", "", Internet$Eenheid)
Internet$Verbruik <- gsub("\\(", "", Internet$Verbruik)
Internet$Verbruik <- gsub(",", ".", Internet$Verbruik)
Internet$Verbruik <- as.numeric(Internet$Verbruik) / 1024
Internet$Weekdag <- factor(weekdays(as.Date(Internet$Datum)), ordered = TRUE,
levels = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
Internet$Maand <- factor(months(as.Date(Internet$Datum)), ordered = TRUE,
levels = c("March", "April", "May", "June", "July", "August",
"September", "October", "November", "December", "January"))
head(complete_data[, c(1,2,8,9)])
head(Gesprekken)
head(Internet)
library(ggplot2)
Gesprekken_gem_dag <- aggregate(as.numeric(Gesprekken$Gespreksduur), by=list(Gesprekken$Weekdag), FUN="mean")
colnames(Gesprekken_gem_dag) <- c("Weekdag", "GemDag")
plot1 <-
ggplot(Gesprekken, aes(Weekdag, Gespreksduur)) +  geom_boxplot(colour = I("#3366FF")) + ylim(c(0, 300)) +
geom_hline(yintercept = mean(as.numeric(Gesprekken$Gespreksduur)), colour = "red") +
ylab("Gesprekstijd in s") + xlab("") +
ggtitle("Gesprekstijd per Dag") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
Internet_gem_dag <- aggregate(as.numeric(Internet$Verbruik), by=list(Internet$Weekdag), FUN="mean")
colnames(Internet_gem_dag) <- c("Weekdag", "GemDag")
plot2 <-
ggplot(Internet, aes(Weekdag, Verbruik)) +  geom_boxplot(colour = I("#3366FF")) + ylim(c(0, 5)) +
geom_hline(yintercept = mean(as.numeric(Internet$Verbruik)), colour = "red") +
ylab("Verbruik in MB") + xlab("") +
ggtitle("Verbruik per Dag") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(Rmisc)
multiplot(plot1, plot2, cols=2)
Gesprekken_maand <- aggregate(as.numeric(Gesprekken$Gespreksduur), by=list(Gesprekken$Maand), FUN="sum")
colnames(Gesprekken_maand) <- c("Maand", "GesprMaand")
plot3 <-
ggplot(Gesprekken_maand, aes(x = Maand, y = GesprMaand)) +
geom_bar(stat = "identity", fill="white", colour="darkgreen") + ylab("Gesprekstijd in s") + xlab("") +
stat_smooth(method="lm", aes(x = 1:11), se=FALSE) +
ggtitle("Gesprekstijd per Maand") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_brewer()
Internet_maand <- aggregate(as.numeric(Internet$Verbruik), by=list(Internet$Maand), FUN="sum")
colnames(Internet_maand) <- c("Maand", "VerbrMaand")
plot4 <-
ggplot(Internet_maand, aes(x = Maand, y = VerbrMaand)) +
geom_bar(stat = "identity", fill="white", colour="darkgreen") + ylab("Verbruik in MB") + xlab("") +
stat_smooth(method="lm", aes(x = 1:11), se=FALSE) +
ggtitle("Internet Verbruik per Maand") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
multiplot(plot3, plot4, cols=2)
Prijs_per_maand <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Maand), FUN = "sum")
names(Prijs_per_maand) <- c("Maand", "Kosten")
Prijs_per_maand_type <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Maand, complete_data$Type), FUN = "sum")
names(Prijs_per_maand_type) <- c("Maand", "Type", "Kosten")
Prijs_per_maand$bundle <- c(rep(7.50 , 11))
plot5 <-
ggplot(Prijs_per_maand, aes(x = Maand, y = Kosten)) +
geom_bar(stat = "identity", fill="white", colour="darkgreen") + ylab("Kosten in Euro's") +
geom_errorbar(aes(y = bundle, ymin = bundle, ymax = bundle), colour = "red") +
xlab("") + ggtitle("Kosten per Maand in Euro's") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot6 <-
ggplot(Prijs_per_maand_type, aes(x = Maand, y = Kosten, fill=Type)) +
geom_bar(position="fill", stat = "identity") + ylab("Verderling in Procenten") +
xlab("") + ggtitle("Verdeling kosten Internet vs. Gesprekken") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(labels =scales::percent) +
theme(legend.justification=c(0,1), legend.position=c(0,1))
multiplot(plot5, plot6, cols=2)
Prijs_per_maand <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Maand), FUN = "sum")
names(Prijs_per_maand) <- c("Maand", "Kosten")
Prijs_per_maand_type <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Maand, complete_data$Type), FUN = "sum")
names(Prijs_per_maand_type) <- c("Maand", "Type", "Kosten")
Prijs_per_maand$bundle <- c(rep(7.50 , 11))
plot5 <-
ggplot(Prijs_per_maand, aes(x = Maand, y = Kosten)) +
geom_bar(stat = "identity", fill="white", colour="darkgreen") + ylab("Kosten in Euro's") +
geom_errorbar(aes(y = bundle, ymin = bundle, ymax = bundle), colour = "red") +
xlab("") + ggtitle("Kosten per Maand in Euro's") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot6 <-
ggplot(Prijs_per_maand_type, aes(x = Maand, y = Kosten, fill=Type)) +
geom_bar(position="fill", stat = "identity") + ylab("Verderling in Procenten") +
xlab("") + ggtitle("Verdeling kosten Internet vs. Gesprekken") +
stat_smooth(method="lm", aes(x = 1:11), se=FALSE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(labels =scales::percent) +
theme(legend.justification=c(0,1), legend.position=c(0,1))
multiplot(plot6, plot5, cols=2)
Prijs_per_maand <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Maand), FUN = "sum")
names(Prijs_per_maand) <- c("Maand", "Kosten")
Prijs_per_maand_type <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Maand, complete_data$Type), FUN = "sum")
names(Prijs_per_maand_type) <- c("Maand", "Type", "Kosten")
Prijs_per_maand$bundle <- c(rep(7.50 , 11))
plot5 <-
ggplot(Prijs_per_maand, aes(x = Maand, y = Kosten)) +
geom_bar(stat = "identity", fill="white", colour="darkgreen") + ylab("Kosten in Euro's") +
stat_smooth(method="lm", aes(x = 1:11), se=FALSE) +
geom_errorbar(aes(y = bundle, ymin = bundle, ymax = bundle), colour = "red") +
xlab("") + ggtitle("Kosten per Maand in Euro's") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plot6 <-
ggplot(Prijs_per_maand_type, aes(x = Maand, y = Kosten, fill=Type)) +
geom_bar(position="fill", stat = "identity") + ylab("Verderling in Procenten") +
xlab("") + ggtitle("Verdeling kosten Internet vs. Gesprekken") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(labels =scales::percent) +
theme(legend.justification=c(0,1), legend.position=c(0,1))
multiplot(plot6, plot5, cols=2)
Gesprekken_gem_uur <- aggregate(as.numeric(Gesprekken$Gespreksduur), by=list(Gesprekken$Uur), FUN="mean")
colnames(Gesprekken_gem_uur) <- c("Tijd", "GemUur")
plot7 <-
ggplot(Gesprekken, aes(as.numeric(Uur), Gespreksduur)) + geom_jitter(color="red") +
geom_smooth() + ylim(c(0, 300)) +
ylab("Gesprekstijd in s") + xlab("") +
ggtitle("Verloop Gesprekstijd per Uur") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_continuous(breaks=seq(1, 24, 1))
Internet_gem_uur <- aggregate(as.numeric(Internet$Verbruik), by=list(Internet$Uur), FUN="mean")
colnames(Internet_gem_uur) <- c("Tijd", "GemUur")
plot8 <-
ggplot(Internet, aes(as.numeric(Uur), Verbruik)) + geom_jitter(color="red") +
geom_smooth() + ylim(c(0, 2)) +
ylab("Gemiddeld Verbruik in MB") + xlab("") +
ggtitle("Gemiddeld Verbruik per Uur") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_continuous(breaks=seq(1, 24, 1))
multiplot(plot7, plot8, cols=2)
library(plyr)
Tijd_per_nummer <- aggregate(Gesprekken$Gespreksduur, by = list(Gesprekken$Telnummer, Gesprekken$Maand), 'sum')
Prijs_per_nummer <- aggregate(as.numeric(Gesprekken$Prijs), by = list(Gesprekken$Telnummer, Gesprekken$Maand), 'sum')
colnames(Tijd_per_nummer) <- c("Nummer", "Maand", "SomTijd")
colnames(Prijs_per_nummer) <- c("Nummer", "Maand", "SomPrijs")
Tijd_per_nummer_top <- arrange(Tijd_per_nummer, desc(SomTijd))[1:15,]
Prijs_per_nummer_top <- arrange(Prijs_per_nummer, desc(SomPrijs))[1:15,]
plot9 <-
ggplot(Tijd_per_nummer_top, aes(x = Nummer, y = SomTijd, fill= Maand)) +
geom_bar(stat = "identity") + ylab("Beltijd in s") + xlab("") +
ggtitle("Beltijd per Nummer") +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position='none') +
scale_fill_brewer()
plot10 <-
ggplot(Prijs_per_nummer_top, aes(x = Nummer, y = SomPrijs, fill= Maand)) +
geom_bar(stat = "identity") + ylab("Kosten in Euro's") + xlab("") +
ggtitle("Kosten per Nummer") +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.justification=c(1,1), legend.position=c(1,1)) +
scale_fill_brewer()
multiplot(plot10, plot9, cols=2)
#forecast
#use over weeks
#add weeks in the month view?
#allargare finestre immagini
ts(Prijs_per_maand$Kosten)
Time_series <- ts(Prijs_per_maand$Kosten)
length(Time_series)
library(forecast)
Time_series <- ts(Prijs_per_maand$Kosten)
length_ts <- length(Time_series)
Time_series_train1 <- Time_series[1:(length_ts-4)]
Time_series_test1 <- Time_series[(length_ts-3):length_ts]
model_autoarima1 <- auto.arima(Time_series_train1)
model_ets1 <- ets(Time_series_train1)
forecast_autoarima1 <- forecast(model_autoarima1, 4)
forecast_ets1 <- forecast(model_ets1, 4)
error_autoarima1 <- sqrt(sum((forecast_autoarima1$mean-Time_series_test1)*(forecast_autoarima1$mean-Time_series_test1)))
error_ets1 <- sqrt(sum((forecast_ets1$mean-Time_series_test1)*(forecast_ets1$mean-Time_series_test1)))
error_autoarima1
error_ets1
Time_series_train2 <- Time_series[1:(length_ts-1)]
Time_series_test2 <- Time_series[length_ts]
model_autoarima2 <- auto.arima(Time_series_train2)
model_ets2 <- ets(Time_series_train2)
forecast_autoarima2 <- forecast(model_autoarima2, 1)
forecast_ets2 <- forecast(model_ets2, 1)
error_autoarima2 <- sqrt(sum((forecast_autoarima2$mean-Time_series_test2)*(forecast_autoarima2$mean-Time_series_test2)))
error_ets2 <- sqrt(sum((forecast_ets2$mean-Time_series_test2)*(forecast_ets2$mean-Time_series_test2)))
error_autoarima2
error_ets2
ggplot(Prijs_per_maand_type, aes(x = Maand, y = Kosten, fill=Type)) +
geom_bar(position="fill", stat = "identity") + ylab("Verderling in Procenten") +
xlab("") + ggtitle("Verdeling kosten Internet vs. Gesprekken") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(labels =scales::percent) +
theme(legend.justification=c(0,1), legend.position=c(0,1)) +
scale_fill_brewer()
ggplot(Prijs_per_maand, aes(x = Maand, y = Kosten)) +
geom_bar(stat = "identity", fill="white", colour="darkgreen") + ylab("Kosten in Euro's") +
stat_smooth(method="lm", aes(x = 1:11), se=FALSE) +
geom_errorbar(aes(y = bundle, ymin = bundle, ymax = bundle), colour = "red") +
xlab("") + ggtitle("Kosten per Maand in Euro's") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_brewer()
library(ggplot2)
Gesprekken_gem_dag <- aggregate(as.numeric(Gesprekken$Gespreksduur), by=list(Gesprekken$Weekdag), FUN="mean")
colnames(Gesprekken_gem_dag) <- c("Weekdag", "GemDag")
plot1 <-
ggplot(Gesprekken, aes(Weekdag, Gespreksduur)) +  geom_boxplot(colour = I("#3366FF")) + ylim(c(0, 300)) +
geom_hline(yintercept = mean(as.numeric(Gesprekken$Gespreksduur)), colour = "red") +
ylab("Gesprekstijd in s") + xlab("") +
ggtitle("Gesprekstijd per Dag") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
Internet_gem_dag <- aggregate(as.numeric(Internet$Verbruik), by=list(Internet$Weekdag), FUN="mean")
colnames(Internet_gem_dag) <- c("Weekdag", "GemDag")
plot2 <-
ggplot(Internet, aes(Weekdag, Verbruik)) +  geom_boxplot(colour = I("#3366FF")) + ylim(c(0, 5)) +
geom_hline(yintercept = mean(as.numeric(Internet$Verbruik)), colour = "red") +
ylab("Verbruik in MB") + xlab("") +
ggtitle("Verbruik per Dag") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(Rmisc)
multiplot(plot1, plot2, cols=2)
#aggiungere numero di chiamate
Prijs_per_dag <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Datum), FUN = "sum")
Prijs_per_dag <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Datum), FUN = "sum")
names(Prijs_per_dag) <- c("Maand", "Kosten")
library(forecast)
Prijs_per_dag <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Datum), FUN = "sum")
names(Prijs_per_dag) <- c("Maand", "Kosten")
Time_series <- ts(Prijs_per_dag$Kosten)
length_ts <- length(Time_series)
Time_series_train1 <- Time_series[1:(length_ts-4)]
Time_series_test1 <- Time_series[(length_ts-3):length_ts]
model_autoarima1 <- auto.arima(Time_series_train1)
model_ets1 <- ets(Time_series_train1)
forecast_autoarima1 <- forecast(model_autoarima1, 4)
forecast_ets1 <- forecast(model_ets1, 4)
error_autoarima1 <- sqrt(sum((forecast_autoarima1$mean-Time_series_test1)*(forecast_autoarima1$mean-Time_series_test1)))
error_ets1 <- sqrt(sum((forecast_ets1$mean-Time_series_test1)*(forecast_ets1$mean-Time_series_test1)))
error_autoarima1
error_ets1
library(forecast)
Prijs_per_dag <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Datum), FUN = "sum")
names(Prijs_per_dag) <- c("Maand", "Kosten")
Time_series <- ts(Prijs_per_dag$Kosten)
length_ts <- length(Time_series)
Time_series_train1 <- Time_series[1:(length_ts-7)]
Time_series_test1 <- Time_series[(length_ts-6):length_ts]
model_autoarima1 <- auto.arima(Time_series_train1)
model_ets1 <- ets(Time_series_train1)
forecast_autoarima1 <- forecast(model_autoarima1, 7)
forecast_ets1 <- forecast(model_ets1, 7)
error_autoarima1 <- sqrt(sum((forecast_autoarima1$mean-Time_series_test1)*(forecast_autoarima1$mean-Time_series_test1)))
error_ets1 <- sqrt(sum((forecast_ets1$mean-Time_series_test1)*(forecast_ets1$mean-Time_series_test1)))
error_autoarima1
error_ets1
library(forecast)
Prijs_per_dag <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Datum), FUN = "sum")
names(Prijs_per_dag) <- c("Maand", "Kosten")
Time_series <- ts(Prijs_per_dag$Kosten)
length_ts <- length(Time_series)
Time_series_train1 <- Time_series[1:(length_ts-30)]
Time_series_test1 <- Time_series[(length_ts-29):length_ts]
model_autoarima1 <- auto.arima(Time_series_train1)
model_ets1 <- ets(Time_series_train1)
forecast_autoarima1 <- forecast(model_autoarima1, 30)
forecast_ets1 <- forecast(model_ets1, 30)
error_autoarima1 <- sqrt(sum((forecast_autoarima1$mean-Time_series_test1)*(forecast_autoarima1$mean-Time_series_test1)))
error_ets1 <- sqrt(sum((forecast_ets1$mean-Time_series_test1)*(forecast_ets1$mean-Time_series_test1)))
error_autoarima1
error_ets1
library(forecast)
Prijs_per_dag <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Datum), FUN = "sum")
names(Prijs_per_dag) <- c("Dag", "Kosten")
Time_series <- ts(Prijs_per_dag$Kosten)
length_ts <- length(Time_series)
Time_series_train1 <- Time_series[1:(length_ts-30)]
Time_series_test1 <- Time_series[(length_ts-29):length_ts]
model_autoarima1 <- auto.arima(Time_series_train1)
model_ets1 <- ets(Time_series_train1)
forecast_autoarima1 <- forecast(model_autoarima1, 30)
forecast_ets1 <- forecast(model_ets1, 30)
error_autoarima1 <- sqrt(sum((forecast_autoarima1$mean-Time_series_test1)*(forecast_autoarima1$mean-Time_series_test1)))
error_ets1 <- sqrt(sum((forecast_ets1$mean-Time_series_test1)*(forecast_ets1$mean-Time_series_test1)))
error_autoarima1
error_ets1
library(forecast)
Prijs_per_dag <- aggregate(as.numeric(complete_data$Prijs), by = list(complete_data$Datum), FUN = "sum")
names(Prijs_per_dag) <- c("Dag", "Kosten")
Time_series <- ts(Prijs_per_dag$Kosten)
length_ts <- length(Time_series)
Time_series_train1 <- Time_series[1:(length_ts-7)]
Time_series_test1 <- Time_series[(length_ts-6):length_ts]
model_autoarima1 <- auto.arima(Time_series_train1)
model_ets1 <- ets(Time_series_train1)
forecast_autoarima1 <- forecast(model_autoarima1, 7)
forecast_ets1 <- forecast(model_ets1, 7)
error_autoarima1 <- sqrt(sum((forecast_autoarima1$mean-Time_series_test1)*(forecast_autoarima1$mean-Time_series_test1)))
error_ets1 <- sqrt(sum((forecast_ets1$mean-Time_series_test1)*(forecast_ets1$mean-Time_series_test1)))
error_autoarima1
error_ets1
model_autoarima <- auto.arima(Time_series)
forecast_autoarima <- forecast(model_autoarima, 7)
plot(forecast_autoarima)
#pd <- funggcast(Time_series, forecast_autoarima)
#p <- ggplot(forecast_autoarima, aes(mean)) + geom_line()
# come si puo migliorare fare un ts dei giorni invece che dei mesi per avere piu osservazioni?
plot(forecast_autoarima, xlim=c(250, 300))
plot(forecast_autoarima, xlim=c(250, 285))
forecast(model_autoarima, 7)
plot(forecast_autoarima, xlim=c(250, 285), ylim=c(0,3))
plot(forecast_autoarima$model, xlim=c(250, 285), ylim=c(0,3))
forecast_autoarima <- forecast(model_autoarima, 7)
forecast_autoarima$mean
plot(forecast_autoarima$mean, xlim=c(250, 285), ylim=c(0,3))
forecast_autoarima$x
forecast_autoarima$level
forecast_autoarima$method
plot(forecast_autoarima[c(1,2,3),], xlim=c(250, 285), ylim=c(0,3))
plot(forecast_autoarima[,c(1,2,3)], xlim=c(250, 285), ylim=c(0,3))
